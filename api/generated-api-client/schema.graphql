directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

type ArticleContent {
  id: String!
  refId: String!
  refType: String!
  content: String!
  format: String!
  formatVersion: Int
  topicsMap: JSON
  expiresAt: Int!
  createdAt: String!
  updatedAt: String
}

enum ArticleContentFormat {
  text
  md
  json
}

type ArticleContentRef {
  refId: String!
  refType: String!
}

enum ArticleContentRefType {
  NEWS
  EVENT
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input CountEventsByTopicQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  topicId: String!
}

input CountEventsQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
}

input CountNewsByEventQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  eventId: String!
}

input CountNewsBySourceQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  sourceId: String!
}

input CountNewsByTopicQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  topicId: String!
}

input CountNewsQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
}

input CountQuotesByAuthorQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
  authorId: String!
}

input CountQuotesByTopicQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
  topicId: String!
}

input CountQuotesQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
}

type DailyForecastDataBlock implements IForecastDataBlock {
  icon: Int!
  night: Boolean
  data: [DailyForecastDataPoint]!
}

type DailyForecastDataPoint implements IForecastDataPoint {
  cloudCover: Float
  dewPoint: Float
  humidity: Float
  icon: Int!
  night: Boolean
  ozone: Float
  precipAccumulation: Float
  precipIntensity: Float
  precipProbability: Float
  precipType: String
  pressure: Float
  temperature: Float!
  time: Int!
  uvIndex: Float
  visibility: Float
  windDir: String
  windGust: Float
  windSpeed: Float
  temperatureHigh: Float
  temperatureHighTime: Int
  temperatureLow: Float
  temperatureLowTime: Int
  moonPhase: Float
  sunriseTime: Int
  sunsetTime: Int
}

type ForecastReport {
  latitude: Float!
  longitude: Float!
  timezone: String!
  units: String!
  hourly: HourlyForecastDataBlock
  details: HoursForecastDataBlock
  daily: DailyForecastDataBlock
}

input HoroscopeGenerateReportsParams {
  lang: String!
  period: String!
}

input HoroscopeListPhraseParams {
  lang: String!
  limit: Int!
  offset: Int
}

type HoroscopePhrase {
  iid: Int
  id: String!
  lang: String!
  source: String!
  text: String!
  length: Int!
  sign: Int!
  period: String!
  createdAt: String!
}

type HoroscopeReport {
  id: String!
  lang: String!
  text: String!
  length: Int!
  sign: Int!
  period: String!
  phrasesIds: [String!]!
  phrases: [HoroscopePhrase!]!
  numbers: [Int!]!
  stats: HoroscopeReportStats!
  createdAt: String!
  expiresAt: Int!
}

type HoroscopeReportStats {
  love: Int!
  success: Int!
  health: Int!
}

type HourlyForecastDataBlock implements IForecastDataBlock {
  icon: Int!
  night: Boolean
  data: [HourlyForecastDataPoint]!
}

type HourlyForecastDataPoint implements IForecastDataPoint {
  cloudCover: Float
  dewPoint: Float
  humidity: Float
  icon: Int!
  night: Boolean
  ozone: Float
  precipAccumulation: Float
  precipIntensity: Float
  precipProbability: Float
  precipType: String
  pressure: Float
  temperature: Float!
  time: Int!
  uvIndex: Float
  visibility: Float
  windDir: String
  windGust: Float
  windSpeed: Float
}

type HoursForecastDataBlock implements IForecastDataBlock {
  icon: Int!
  night: Boolean
  data: [HoursForecastDataPoint]!
}

type HoursForecastDataPoint implements IForecastDataPoint {
  cloudCover: Float
  dewPoint: Float
  humidity: Float
  icon: Int!
  night: Boolean
  ozone: Float
  precipAccumulation: Float
  precipIntensity: Float
  precipProbability: Float
  precipType: String
  pressure: Float
  temperature: Float!
  time: Int!
  uvIndex: Float
  visibility: Float
  windDir: String
  windGust: Float
  windSpeed: Float
  temperatureHigh: Float
  temperatureHighTime: Int
  temperatureLow: Float
  temperatureLowTime: Int
}

interface IForecastDataBlock {
  icon: Int!
  night: Boolean
}

interface IForecastDataPoint {
  cloudCover: Float
  dewPoint: Float
  humidity: Float
  icon: Int!
  night: Boolean
  ozone: Float
  precipAccumulation: Float
  precipIntensity: Float
  precipProbability: Float
  precipType: String
  pressure: Float
  temperature: Float!
  time: Int!
  uvIndex: Float
  visibility: Float
  windDir: String
  windGust: Float
  windSpeed: Float
}

input InputTimezoneGeoPoint {
  longitude: Float!
  latitude: Float!
  timezone: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LatestEventsByTopicQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  limit: Int!
  topicId: String!
}

input LatestEventsQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  limit: Int!
}

input LatestNewsByEventQueryParams {
  lang: String!
  country: String!
  limit: Int!
  minDate: String
  maxDate: String
  eventId: String!
}

input LatestNewsBySourceQueryParams {
  lang: String!
  country: String!
  limit: Int!
  minDate: String
  maxDate: String
  sourceId: String!
}

input LatestNewsByTopicQueryParams {
  lang: String!
  country: String!
  limit: Int!
  minDate: String
  maxDate: String
  topicId: String!
}

input LatestNewsQueryParams {
  lang: String!
  country: String!
  limit: Int!
  minDate: String
  maxDate: String
}

input ListQuotesByAuthorQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
  limit: Int!
  authorId: String!
}

input ListQuotesByTopicQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
  limit: Int!
  topicId: String!
}

input ListQuotesQueryParams {
  lang: String!
  country: String!
  maxDate: String
  minDate: String
  limit: Int!
}

type Mutation {
  add(n1: Int!, n2: Int!): Int!
  news_viewNewsEvent(id: String!): Int!
  news_viewNewsItem(id: String!): Int!
  topics_setTopicType(id: String!, type: TopicType): Topic!
}

type NewsEvent {
  id: String!
  title: String!
  slug: String!
  summary: String!
  source: NewsEventSource!
  lang: String!
  country: String!
  imageId: String!
  imageHost: String!
  imageSourceId: String!
  countNews: Int!
  countViews: Int!
  countQuotes: Int!
  countVideos: Int!
  countImages: Int!
  topics: [NewsTopic]!
  items: [NewsEventItem]!
  quotesIds: [String]
  videosIds: [String]
  imagesIds: [String]
  status: String
  createdAt: String!
  updatedAt: String
  expiresAt: Int!
  hasContent: Boolean!
}

type NewsEventItem {
  id: String!
  title: String!
  sourceId: String!
  host: String!
  path: String!
  publishedAt: String!
}

type NewsEventSource {
  id: String!
  host: String!
  path: String!
  sourceId: String!
}

enum NewsEventStatus {
  ADULT
}

type NewsItem {
  id: String!
  title: String!
  summary: String!
  lang: String!
  country: String!
  urlPath: String!
  urlHost: String!
  slug: String!
  sourceId: String!
  imagesIds: [String]
  videoId: String
  topics: [NewsTopic]
  eventId: String
  createdAt: String!
  updatedAt: String
  publishedAt: String!
  expiresAt: Int!
  titleHash: String!
  hasContent: Boolean!
  countViews: Int!
  countQuotes: Int!
  quotesIds: [String]
}

input NewsSearchParams {
  lang: String!
  country: String!
  q: String!
  limit: Int!
  minScore: Float
  type: String
}

type NewsTopic {
  id: String!
  name: String!
  slug: String!
  abbr: String
  type: String
}

enum NewsTopicType {
  PERSON
  ORG
  PLACE
  PRODUCT
  WORK
  EVENT
}

type NewsTopItem {
  id: String!
  count: Int!
}

type Place {
  id: String!
  name: String!
  asciiname: String!
  names: String
  latitude: Float!
  longitude: Float!
  featureClass: String!
  featureCode: String
  countryCode: String!
  admin1Code: String!
  admin2Code: String
  admin3Code: String
  population: Int
  elevation: Int
  dem: Int
  timezone: String!
  admin1: Place
}

type PlaceOldId {
  id: Int!
  geonameid: Int!
}

type PublicHoliday {
  date: Int!
  name: String!
}

type Query {
  ping: String!
  publicHolidays(country: String!, lang: String!, start: Int, end: Int): [PublicHoliday]
  weather_forecastReport(place: InputTimezoneGeoPoint!): ForecastReport
  weather_datePlacesForecast(places: [InputTimezoneGeoPoint]!, date: String!): [DailyForecastDataPoint]
  weather_nowPlaceForecast(place: InputTimezoneGeoPoint!): HourlyForecastDataPoint
  places_placeById(id: String!): Place
  places_searchPlace(query: String!, country: String!, limit: Int!, type: String): [Place]
  places_placesByIds(ids: [String]!): [Place]
  places_placesByAdmin1Code(country: String!, admin1Code: String!, limit: Int!): [Place]
  places_mainPlaces(country: String!, limit: Int!): [Place]
  places_admin1s(country: String!, limit: Int!): [Place]
  places_admin1(admin1Code: String!, country: String!): Place
  places_placeOldId(id: Int!): PlaceOldId
  news_itemById(id: String!): NewsItem
  news_itemsByIds(ids: [String]!): [NewsItem]!
  news_itemsSearch(params: NewsSearchParams!): [NewsItem]!
  news_itemsLatest(params: LatestNewsQueryParams): [NewsItem]!
  news_itemsLatestBySource(params: LatestNewsBySourceQueryParams): [NewsItem]!
  news_itemsLatestByTopic(params: LatestNewsByTopicQueryParams): [NewsItem]!
  news_itemsLatestByEvent(params: LatestNewsByEventQueryParams): [NewsItem]!
  news_itemsCount(params: CountNewsQueryParams): Int!
  news_itemsCountBySource(params: CountNewsBySourceQueryParams): Int!
  news_itemsCountByTopic(params: CountNewsByTopicQueryParams): Int!
  news_itemsCountByEvent(params: CountNewsByEventQueryParams): Int!
  news_topSources(params: LatestNewsQueryParams): [NewsTopItem]!
  news_topSourceTopics(params: LatestNewsBySourceQueryParams): [NewsTopItem]!
  news_eventById(id: String!): NewsEvent
  news_eventsByIds(ids: [String]!): [NewsEvent]!
  news_eventsLatest(params: LatestEventsQueryParams): [NewsEvent]!
  news_eventsLatestByTopic(params: LatestEventsByTopicQueryParams): [NewsEvent]!
  news_eventsCount(params: CountEventsQueryParams): Int!
  news_eventsCountByTopic(params: CountEventsByTopicQueryParams): Int!
  news_topTopics(params: LatestEventsQueryParams): [NewsTopItem]!
  news_trendingTopics(params: TrendingTopicsQueryParams): [NewsTopItem]!
  news_similarEventsByTopics(params: SimilarEventsByTopicsQueryParams): [NewsEvent]!
  news_articleContentById(id: String!): ArticleContent
  news_articleContentsByIds(ids: [String]!): [ArticleContent]!
  topics_topicById(id: String!): Topic
  topics_topicsByIds(ids: [String]!): [Topic]!
  topics_topicsByWikiIds(wikiIds: [TopicWikiId]!): [Topic]!
  quotes_quoteById(id: String!): Quote
  quotes_quotesByIds(ids: [String!]!): [Quote]!
  quotes_latest(params: ListQuotesQueryParams): [Quote]!
  quotes_latestByTopic(params: ListQuotesByTopicQueryParams): [Quote]!
  quotes_latestByAuthor(params: ListQuotesByAuthorQueryParams): [Quote]!
  quotes_count(params: CountQuotesQueryParams): Int!
  quotes_countByTopic(params: CountQuotesByTopicQueryParams): Int!
  quotes_countByAuthor(params: CountQuotesByAuthorQueryParams): Int!
  quotes_topTopics(params: ListQuotesQueryParams): [QuoteTopItem]!
  quotes_topAuthors(params: ListQuotesQueryParams): [QuoteTopItem]!
  quotes_topAuthorTopics(params: ListQuotesByAuthorQueryParams): [QuoteTopItem]!
  quotes_popularByAuthor(params: ListQuotesByAuthorQueryParams): [Quote]!
  horoscopes_reportById(id: String!): HoroscopeReport
  horoscopes_reportsByIds(ids: [String!]!): [HoroscopeReport]!
  horoscopes_phraseById(id: String!): HoroscopePhrase
  horoscopes_generateReports(params: HoroscopeGenerateReportsParams!): [HoroscopeReport]!
  horoscopes_phraseList(params: HoroscopeListPhraseParams!): [HoroscopePhrase]!
  videos_videoById(id: String!): Video
  videos_videosByIds(ids: [String!]!): [Video]!
  cocoshel_unsubsribe(id: String!): Boolean!
}

type Quote {
  id: String!
  lang: String!
  country: String!
  source: QuoteSource!
  author: QuoteAuthor!
  text: String!
  topics: [QuoteTopic]
  lastFoundAt: String!
  createdAt: String!
  expiresAt: Int!
  countViews: Int!
  events: [QuoteEvent]
}

type QuoteAuthor {
  name: String!
  slug: String!
  id: String!
}

type QuoteEvent {
  title: String!
  id: String!
  imageId: String
}

type QuoteSource {
  host: String!
  path: String!
  title: String!
  id: String!
  imageId: String
}

type QuoteTopic {
  id: String!
  name: String!
  slug: String!
  abbr: String
  type: String
  rel: String
}

enum QuoteTopicRelation {
  MENTION
}

enum QuoteTopicType {
  PERSON
  ORG
  PLACE
  PRODUCT
  WORK
  EVENT
}

type QuoteTopItem {
  id: String!
  count: Int!
}

input SimilarEventsByTopicsQueryParams {
  lang: String!
  country: String!
  minDate: String
  maxDate: String
  limit: Int!
  topicIds: [String]!
  exceptId: String
}

type Topic {
  id: String!
  lang: String!
  country: String!
  wikiId: String
  name: String!
  commonName: String
  englishName: String
  abbr: String
  type: String
  description: String
  about: String
  isActive: Boolean
  createdAt: String!
  updatedAt: String
}

enum TopicType {
  PLACE
  ORG
  PERSON
  WORK
  EVENT
}

input TopicWikiId {
  lang: String!
  country: String!
  wikiId: String!
}

input TrendingTopicsQueryParams {
  lang: String!
  country: String!
  limit: Int!
  period: String!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Video {
  id: String!
  sourceId: String!
  sourceType: String!
  websites: [String]!
  createdAt: String!
  expiresAt: Int!
  width: Int
  height: Int
  countViews: Int!
}
